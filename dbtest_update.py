import random as rnd
import luigi
import time
import psycopg2
from luigi.contrib.postgres import PostgresTarget
# from luigi.contrib.postgres import PostgresTarget
# from luigi.contrib import rdbms

class Expert_Check(luigi.Task):
    def output(self):
        print("Expert_Check : output @@@@@@@@@@@@@@@@@@")
        return luigi.LocalTarget("db_test_update/ExpertCheck_%s.txt" % time.asctime())

    def run(self):
        print("Expert_Check : run @@@@@@@@@@@@@@@@@@")

        host = "localhost"
        database = "db"
        user = "db"
        password = "dbdb"

        # reason = "screw not tightend"
        reason = input("ENTER THE REASON: ") 

        conn = psycopg2.connect(dbname=database, user=user, host=host, password=password)
        cur = conn.cursor()
        query = """UPDATE tm_similarity SET reason = (%s) WHERE id = (SELECT MAX(id) FROM tm_similarity);"""
        cur.execute(query, (reason,))
        conn.commit()
        cur.close()
        conn.close()

        with self.output().open("w") as target:
            target.write("Expert Check was done at %s." % time.asctime())

class T1_BTM(luigi.Task):
    def output(self):
        print("T1_BTM : output @@@@@@@@@@@@@@@@@@")
        return luigi.LocalTarget("db_test_update/T1_BTM_%s.txt" % time.asctime())

    def run(self):
        print("T1_BTM : run @@@@@@@@@@@@@@@@@@")
        with self.output().open("w") as target:
            target.write("this file was generated by Task1(before TM) at %s." % time.asctime())

class T1_TM(luigi.Task):
    def requires(self):
        return T1_BTM()

    def output(self):
        print("Template_Matching : output @@@@@@@@@@@@@@@@@@")
        return luigi.LocalTarget("db_test_update/T1_TM_%s.txt" % time.asctime())
       
    def run(self):
        print("Template_Matching : run @@@@@@@@@@@@@@@@@@")
        sim = rnd.randint(1,4)
        print("!!!!!!!!!!SIMILALITY : %d !!!!!!!!!!!!!!!" % sim)

        host = "localhost"
        database = "db"
        user = "db"
        password = "dbdb"

        conn = psycopg2.connect(dbname=database, user=user, host=host, password=password)
        cur = conn.cursor()
        query = """INSERT INTO tm_similarity (task_name, similarity) VALUES(%s, %s);"""
        cur.execute(query, ('Task1', sim))
        conn.commit()
        cur.close()
        conn.close()

        with self.output().open("w") as target:
            target.write(str(sim))


class T2_BTM(luigi.Task):

    def requires(self):
        return T1_TM()

    def output(self):
        print("T2_BTM : output @@@@@@@@@@@@@@@@@@")
        return luigi.LocalTarget("db_test_update/T2BTM_%s.txt" % time.asctime())

    def run(self):
        print("T2_BTM : run @@@@@@@@@@@@@@@@@@")
        with self.input().open("r") as tm:
            sim = int(tm.read())
        
        if(sim<5):
            print("SIMILALITY LESS THAN 5 SO THAT WE EXECUTE EXPERT CHECK")
            yield Expert_Check()
        
        with self.output().open("w") as target:
            target.write("New Task was done at %s." % time.asctime())

class T2_TM(luigi.Task):
    def requires(self):
        return T2_BTM()

    def output(self):
        print("Template_Matching : output @@@@@@@@@@@@@@@@@@")
        return luigi.LocalTarget("db_test_update/T2TM_%s.txt" % time.asctime())
       
    def run(self):
        print("Template_Matching : run @@@@@@@@@@@@@@@@@@")
        sim = rnd.randint(1,4)
        print("!!!!!!!!!!SIMILALITY : %d !!!!!!!!!!!!!!!" % sim)

        host = "localhost"
        database = "db"
        user = "db"
        password = "dbdb"

        conn = psycopg2.connect(dbname=database, user=user, host=host, password=password)
        cur = conn.cursor()
        query = """INSERT INTO tm_similarity (task_name, similarity) VALUES(%s, %s);"""
        cur.execute(query, ('Task2', sim))
        conn.commit()
        cur.close()
        conn.close()

        with self.output().open("w") as target:
            target.write(str(sim))


# class T3_BTM(luigi.Task):

#     def requires(self):
#         return T2_TM()

#     def output(self):
#         print("T3_BTM : output @@@@@@@@@@@@@@@@@@")
#         return luigi.LocalTarget("db_test_update/T3BTM_%s.txt" % time.asctime())

#     def run(self):
#         print("T3_BTM : run @@@@@@@@@@@@@@@@@@")
#         with self.input().open("r") as tm:
#             sim = int(tm.read())
        
#         if(sim<5):
#             print("SIMILALITY LESS THAN 5 SO THAT WE EXECUTE EXPERT CHECK")
#             yield Expert_Check()
        
#         with self.output().open("w") as target:
#             target.write("New Task was done at %s." % time.asctime())


if __name__ == '__main__':
    luigi.run(['T2_TM', '--workers', '1', '--local-scheduler'])
    # luigi.run(['Next_Task', '--workers', '1'])